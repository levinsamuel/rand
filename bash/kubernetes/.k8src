
function _parse_args {
  ns=
  OPTIND=1
  while getopts "n:fiv" opt; do
    case ${opt} in
      n) ns=$OPTARG
      ;;
      f) f_opt="-f"
      ;;
      i) it_opt="-it"
      ;;
      v) ns=valuations-pg
      ;;
    esac
  done
  to_shift=$((OPTIND - 1))
}

function _set_namespace_arg {
  ns_arg=
  if [[ -n $ns ]]; then
    ns_arg="-n${ns}"
  fi
}

function _get_pod_for_release {
  group=$1
  _set_namespace_arg
  local podname=$(kubectl $ns_arg get po | grep -E "$group\-carta\-web\-[0-9a-f]+" | cut -d" " -f1)
  [[ -z $podname ]] && echo "No deployment found matching group: ${group}" >&2 && return 1
  echo $podname
}

function kexec {
  _parse_args $@
  shift $to_shift
  group=$1
  shift
  _set_namespace_arg
  local podname=$(_get_pod_for_release $group $ns)
  kubectl $ns_arg exec $it_opt $podname -c carta-web -- $@
}

function kupd8 {
  _parse_args $@
  shift $to_shift
  _set_namespace_arg
  for group in $@; do
    kubectl $ns_arg get po|grep -E "$group\-(carta\-web|celery\-worker)\-" | cut -f1 -d' '|xargs kubectl $ns_arg delete po
  done
}

function kshell {
    kexec -i "$@" /bin/bash
}

function klog {
  _parse_args $@
  shift $to_shift
  _set_namespace_arg

  group=$1
  shift
  kubectl $ns_arg logs $f_opt "deployment/${group}-carta-web" carta-web
}

function kls {
  IFSBAK=$IFS
  IFS=$'\n'
  _parse_args $@
  shift $to_shift
  _set_namespace_arg
  tab=$'\t'
  nl=$'\n'
  cmd="kubectl $ns_arg get deployments"
  deploys=$(eval $cmd|grep '\-carta\-web[^-]'|cut -f 1 -d ' ')
  dlist=
  for d in $deploys; do dlist="$dlist deployments/$d"; done
  [[ -z $dlist ]] && return

  cmd="kubectl $ns_arg describe $dlist"
  info=($(eval $cmd | grep '^Name:\|Image.*carta\-web\|CreationTimestamp'))
  IFS=$IFSBAK
  len=${#info[@]}
  output=
  image=
  for line in "${info[@]}"; do
    if [[ "$line" == Name:* ]]; then
      name=$(echo $line|sed 's/Name:[[:space:]]*//g')
      name=${name%\-carta\-web}
      image=
    fi
    if [[ "$line" == Creation* ]]; then
      create=${line#CreationTimestamp: }
    fi
    if [[ "$line" == *Image:* && -z $image ]]; then
      image=${line#*esharesinc/carta\-web_test\:}
      output="$output$nl$name${tab}$image${tab}$create"
    fi
  done
  if [[ -n $output ]]; then
    echo -n "Deployment${tab}Image${tab}Created"
    echo "$output"
  fi
  
}

function gist_test_boxes {
  
  set -o errexit
  set -o pipefail
  releases=$(kls -n valuations-pg | cut -f 1| grep -v Deployment)
  for box in $releases; do
    echo "updating $box"
    kexec -n valuations-pg $box ./manage.py run_script $@
  done
}

function update_test_boxes {
  
  releases=$(kls -n valuations-pg | cut -f 1| grep -v Deployment)
  for box in $releases; do
    echo "updating $box"
    kupd8 -n valuations-pg $box
  done
}

function ktest {
  _parse_args $@
  shift $to_shift
  _set_namespace_arg
  echo "namespace $ns"
  echo "group: $1"
  echo "ns arg: $ns_arg"
}
